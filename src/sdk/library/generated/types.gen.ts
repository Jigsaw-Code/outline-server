// This file is auto-generated by @hey-api/openapi-ts

export type Server = {
    name?: string;
    serverId?: string;
    metricsEnabled?: boolean;
    createdTimestampMs?: number;
    portForNewAccessKeys?: number;
};

export type DataLimit = {
    bytes?: number;
};

export type AccessKey = {
    id: string;
    name?: string;
    password?: string;
    port?: number;
    method?: string;
    accessUrl?: string;
};

export type GetServerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/server';
};

export type GetServerResponses = {
    /**
     * Server information
     */
    200: Server;
};

export type GetServerResponse = GetServerResponses[keyof GetServerResponses];

export type PutServerHostnameForAccessKeysData = {
    body: {
        hostname?: string;
    };
    path?: never;
    query?: never;
    url: '/server/hostname-for-access-keys';
};

export type PutServerHostnameForAccessKeysErrors = {
    /**
     * An invalid hostname or IP address was provided.
     */
    400: unknown;
    /**
     * An internal error occurred.  This could be thrown if there were network errors while validating the hostname
     */
    500: unknown;
};

export type PutServerHostnameForAccessKeysResponses = {
    /**
     * The hostname was successfully changed.
     */
    204: void;
};

export type PutServerHostnameForAccessKeysResponse = PutServerHostnameForAccessKeysResponses[keyof PutServerHostnameForAccessKeysResponses];

export type PutServerPortForNewAccessKeysData = {
    body: {
        port?: number;
    };
    path?: never;
    query?: never;
    url: '/server/port-for-new-access-keys';
};

export type PutServerPortForNewAccessKeysErrors = {
    /**
     * The requested port wasn't an integer from 1 through 65535, or the request had no port parameter.
     */
    400: unknown;
    /**
     * The requested port was already in use by another service.
     */
    409: unknown;
};

export type PutServerPortForNewAccessKeysResponses = {
    /**
     * The default port was successfully changed.
     */
    204: void;
};

export type PutServerPortForNewAccessKeysResponse = PutServerPortForNewAccessKeysResponses[keyof PutServerPortForNewAccessKeysResponses];

export type DeleteServerAccessKeyDataLimitData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/server/access-key-data-limit';
};

export type DeleteServerAccessKeyDataLimitResponses = {
    /**
     * Access key limit deleted successfully.
     */
    204: void;
};

export type DeleteServerAccessKeyDataLimitResponse = DeleteServerAccessKeyDataLimitResponses[keyof DeleteServerAccessKeyDataLimitResponses];

export type PutServerAccessKeyDataLimitData = {
    body: DataLimit;
    path?: never;
    query?: never;
    url: '/server/access-key-data-limit';
};

export type PutServerAccessKeyDataLimitErrors = {
    /**
     * Invalid data limit
     */
    400: unknown;
};

export type PutServerAccessKeyDataLimitResponses = {
    /**
     * Access key data limit set successfully
     */
    204: void;
};

export type PutServerAccessKeyDataLimitResponse = PutServerAccessKeyDataLimitResponses[keyof PutServerAccessKeyDataLimitResponses];

export type GetExperimentalServerMetricsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * the range of time to return data for
         */
        since?: string;
    };
    url: '/experimental/server/metrics';
};

export type GetExperimentalServerMetricsResponses = {
    /**
     * Display server metric information
     */
    200: {
        server?: {
            tunnelTime?: {
                seconds?: number;
            };
            dataTransferred?: {
                bytes?: number;
            };
            bandwidth?: {
                current?: {
                    data?: {
                        bytes?: number;
                    };
                    timestamp?: number;
                };
                peak?: {
                    data?: {
                        bytes?: number;
                    };
                    timestamp?: number;
                };
            };
            locations?: Array<{
                location?: string;
                asn?: number;
                asOrg?: string;
                tunnelTime?: {
                    seconds?: number;
                };
                dataTransferred?: {
                    bytes?: number;
                };
            }>;
        };
        accessKeys?: Array<{
            accessKeyId?: number;
            tunnelTime?: {
                seconds?: number;
            };
            dataTransferred?: {
                bytes?: number;
            };
            connection?: {
                lastTrafficSeen?: number;
                peakDeviceCount?: {
                    data?: number;
                    timestamp?: number;
                };
            };
        }>;
    };
};

export type GetExperimentalServerMetricsResponse = GetExperimentalServerMetricsResponses[keyof GetExperimentalServerMetricsResponses];

export type PutNameData = {
    body: {
        name?: string;
    };
    path?: never;
    query?: never;
    url: '/name';
};

export type PutNameErrors = {
    /**
     * Invalid name
     */
    400: unknown;
};

export type PutNameResponses = {
    /**
     * Server renamed successfully
     */
    204: void;
};

export type PutNameResponse = PutNameResponses[keyof PutNameResponses];

export type GetAccessKeysData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/access-keys';
};

export type GetAccessKeysResponses = {
    /**
     * List of access keys
     */
    200: {
        accessKeys?: Array<AccessKey>;
    };
};

export type GetAccessKeysResponse = GetAccessKeysResponses[keyof GetAccessKeysResponses];

export type PostAccessKeysData = {
    body?: {
        name?: string;
        method?: string;
        password?: string;
        port?: number;
        limit?: DataLimit;
    };
    path?: never;
    query?: never;
    url: '/access-keys';
};

export type PostAccessKeysResponses = {
    /**
     * The newly created access key
     */
    201: AccessKey;
};

export type PostAccessKeysResponse = PostAccessKeysResponses[keyof PostAccessKeysResponses];

export type DeleteAccessKeysByIdData = {
    body?: never;
    path: {
        /**
         * The id of the access key to delete
         */
        id: string;
    };
    query?: never;
    url: '/access-keys/{id}';
};

export type DeleteAccessKeysByIdErrors = {
    /**
     * Access key inexistent
     */
    404: {
        code?: string;
        message?: string;
    };
};

export type DeleteAccessKeysByIdError = DeleteAccessKeysByIdErrors[keyof DeleteAccessKeysByIdErrors];

export type DeleteAccessKeysByIdResponses = {
    /**
     * Access key deleted successfully
     */
    204: void;
};

export type DeleteAccessKeysByIdResponse = DeleteAccessKeysByIdResponses[keyof DeleteAccessKeysByIdResponses];

export type GetAccessKeysByIdData = {
    body?: never;
    path: {
        /**
         * The id to get the access key
         */
        id: string;
    };
    query?: never;
    url: '/access-keys/{id}';
};

export type GetAccessKeysByIdErrors = {
    /**
     * Access key inexistent
     */
    404: {
        code?: string;
        message?: string;
    };
};

export type GetAccessKeysByIdError = GetAccessKeysByIdErrors[keyof GetAccessKeysByIdErrors];

export type GetAccessKeysByIdResponses = {
    /**
     * The access key
     */
    200: AccessKey;
};

export type GetAccessKeysByIdResponse = GetAccessKeysByIdResponses[keyof GetAccessKeysByIdResponses];

export type PutAccessKeysByIdData = {
    body?: {
        name?: string;
        method?: string;
        password?: string;
        port?: number;
        limit?: DataLimit;
    };
    path: {
        /**
         * The id for which to create an access key
         */
        id: string;
    };
    query?: never;
    url: '/access-keys/{id}';
};

export type PutAccessKeysByIdResponses = {
    /**
     * The newly created access key
     */
    201: AccessKey;
};

export type PutAccessKeysByIdResponse = PutAccessKeysByIdResponses[keyof PutAccessKeysByIdResponses];

export type PutAccessKeysByIdNameData = {
    body: {
        name?: string;
    };
    path: {
        /**
         * The id of the access key to rename
         */
        id: string;
    };
    query?: never;
    url: '/access-keys/{id}/name';
};

export type PutAccessKeysByIdNameErrors = {
    /**
     * Access key inexistent
     */
    404: unknown;
};

export type PutAccessKeysByIdNameResponses = {
    /**
     * Access key renamed successfully
     */
    204: void;
};

export type PutAccessKeysByIdNameResponse = PutAccessKeysByIdNameResponses[keyof PutAccessKeysByIdNameResponses];

export type DeleteAccessKeysByIdDataLimitData = {
    body?: never;
    path: {
        /**
         * The id of the access key
         */
        id: string;
    };
    query?: never;
    url: '/access-keys/{id}/data-limit';
};

export type DeleteAccessKeysByIdDataLimitErrors = {
    /**
     * Access key inexistent
     */
    404: unknown;
};

export type DeleteAccessKeysByIdDataLimitResponses = {
    /**
     * Access key limit deleted successfully.
     */
    204: void;
};

export type DeleteAccessKeysByIdDataLimitResponse = DeleteAccessKeysByIdDataLimitResponses[keyof DeleteAccessKeysByIdDataLimitResponses];

export type PutAccessKeysByIdDataLimitData = {
    body: DataLimit;
    path: {
        /**
         * The id of the access key
         */
        id: string;
    };
    query?: never;
    url: '/access-keys/{id}/data-limit';
};

export type PutAccessKeysByIdDataLimitErrors = {
    /**
     * Invalid data limit
     */
    400: unknown;
    /**
     * Access key inexistent
     */
    404: unknown;
};

export type PutAccessKeysByIdDataLimitResponses = {
    /**
     * Access key limit set successfully
     */
    204: void;
};

export type PutAccessKeysByIdDataLimitResponse = PutAccessKeysByIdDataLimitResponses[keyof PutAccessKeysByIdDataLimitResponses];

export type GetMetricsTransferData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/metrics/transfer';
};

export type GetMetricsTransferResponses = {
    /**
     * The data transferred by each access key
     */
    200: {
        bytesTransferredByUserId?: {
            [key: string]: number;
        };
    };
};

export type GetMetricsTransferResponse = GetMetricsTransferResponses[keyof GetMetricsTransferResponses];

export type GetMetricsEnabledData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/metrics/enabled';
};

export type GetMetricsEnabledResponses = {
    /**
     * The metrics enabled setting
     */
    200: {
        metricsEnabled?: boolean;
    };
};

export type GetMetricsEnabledResponse = GetMetricsEnabledResponses[keyof GetMetricsEnabledResponses];

export type PutMetricsEnabledData = {
    body: {
        metricsEnabled?: boolean;
    };
    path?: never;
    query?: never;
    url: '/metrics/enabled';
};

export type PutMetricsEnabledErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type PutMetricsEnabledResponses = {
    /**
     * Setting successful
     */
    204: void;
};

export type PutMetricsEnabledResponse = PutMetricsEnabledResponses[keyof PutMetricsEnabledResponses];

export type DeleteExperimentalAccessKeyDataLimitData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/experimental/access-key-data-limit';
};

export type DeleteExperimentalAccessKeyDataLimitResponses = {
    /**
     * Access key limit deleted successfully.
     */
    204: void;
};

export type DeleteExperimentalAccessKeyDataLimitResponse = DeleteExperimentalAccessKeyDataLimitResponses[keyof DeleteExperimentalAccessKeyDataLimitResponses];

export type PutExperimentalAccessKeyDataLimitData = {
    body: DataLimit;
    path?: never;
    query?: never;
    url: '/experimental/access-key-data-limit';
};

export type PutExperimentalAccessKeyDataLimitErrors = {
    /**
     * Invalid data limit
     */
    400: unknown;
};

export type PutExperimentalAccessKeyDataLimitResponses = {
    /**
     * Access key data limit set successfully
     */
    204: void;
};

export type PutExperimentalAccessKeyDataLimitResponse = PutExperimentalAccessKeyDataLimitResponses[keyof PutExperimentalAccessKeyDataLimitResponses];

export type ClientOptions = {
    baseUrl: 'https://myserver/SecretPath' | (string & {});
};